{"version":3,"sources":["components/diagram/node.js","components/diagram/Circle.js","components/diagram/dragpushmap.js","components/diagram/AnimatedPieSvg.js","App.js","serviceWorker.js","index.js"],"names":["node","document","createElement","defs","d3","append","attr","dragstart","item","d","sourceEvent","stopPropagation","classed","dragged","x","y","dragend","React","Canvas","canvas","this","refs","context","getContext","width","height","radius","circles","props","data","map","i","Math","floor","simulation","force","iterations","on","clearRect","save","beginPath","forEach","drawCircle","fill","strokeStyle","stroke","moveTo","arc","PI","call","container","subject","find","active","alphaTarget","restart","fx","fy","ref","Pie","useRef","createPie","value","sort","createArc","innerRadius","outerRadius","colors","useEffect","groupWithData","current","selectAll","exit","remove","groupWithUpdate","enter","merge","select","centroid","style","text","name","transform","StyledDiv","styled","div","inputColor","StyledTitle","StyledTable","table","StyledContainer","GET_STARSHIP_INFO","p","gql","App","useQuery","loading","error","infoData","message","allStarships","length","crew","console","log","Fragment","index","key","passengers","className","AnimatedPieSvg","Boolean","window","location","hostname","match","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e203b6de.chunk.js","sourcesContent":["import * as d3 from 'd3';\nvar node = document.createElement('div');\n\nvar width = 960,\n    height = 500;\n\nvar svg = d3.select(node).append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\nvar defs = svg.append(\"defs\");\n\n defs.append(\"clipPath\")\n    .attr(\"id\", \"circle1\")\n  .append(\"circle\")\n    .attr(\"cx\", 350)\n    .attr(\"cy\", 200)\n    .attr(\"r\", 180);\n\ndefs.append(\"clipPath\")\n    .attr(\"id\", \"circle2\")\n  .append(\"circle\")\n    .attr(\"cx\", 550)\n    .attr(\"cy\", 200)\n    .attr(\"r\", 180);\nexport default node\n","import * as React from 'react';\nimport * as d3 from 'd3';\n\nfunction dragstart(item, d){\n  d3.event.sourceEvent.stopPropagation();\n  d3.select(item).classed(\"dragging\", true);\n}\n\nfunction dragged(item, d){\n  d3.select(item).attr(\"cx\", d3.event.x).attr(\"cy\", d3.event.y);\n}\n\nfunction dragend(item, d){\n  d3.select(item).classed(\"dragging\", false);\n}\n\nclass Circle extends React.Component {\n  componentDidMount(){\n    const drag = d3.drag().subject(d=>{return d3.select(this.ref)}).on(\"start\", dragstart).on(\"drag\",dragged).on(\"end\", dragend)\n    if (this.ref){\n      d3.select(this.ref).attr(\"fill\", \"red\").attr(\"r\", 15).attr(\"cx\", 50).attr(\"cy\", 50).call(drag);\n    }\n  }\n  render(){\n    return <svg><circle ref = {ref=>(this.ref = ref)}/></svg>\n  }\n}\n\nexport default Circle\n","import * as React from \"react\";\nimport * as d3 from \"d3\";\n\n//This is an experiment of sorts\n//Basically, I'm implementing D3 example Force Dragging II into React.\n\n\n\nclass Canvas extends React.Component{\n\n\n\n  componentDidMount(){\n    const canvas = this.refs.canvas;\n    const context = canvas.getContext(\"2d\");\n    const width = canvas.width;\n    const height = canvas.height;\n    const radius = 20;\n    const data = this.props.data\n    var circles = d3.range(324).map(function(i) {\n      return {\n        x: (i % 25) * (radius + 1) * 2,\n        y: Math.floor(i / 25) * (radius + 1) * 2\n      };\n    });\n\nvar simulation = d3.forceSimulation(circles)\n.force(\"collide\", d3.forceCollide(radius + 1).iterations(4))\n.on(\"tick\", drawCircles);\n\nd3.select(canvas)\n.call(d3.drag()\n    .container(canvas)\n    .subject(dragsubject)\n    .on(\"start\", dragstarted)\n    .on(\"drag\", dragged)\n    .on(\"end\", dragended));\n\nfunction drawCircles() {\ncontext.clearRect(0, 0, width, height);\ncontext.save();\ncontext.beginPath();\ncircles.forEach(drawCircle);\ncontext.fill();\ncontext.strokeStyle = \"#fff\";\ncontext.stroke();\n}\n\nfunction drawCircle(d) {\ncontext.moveTo(d.x + radius, d.y);\ncontext.arc(d.x, d.y, radius, 0, 2 * Math.PI);\n}\n\nfunction dragsubject() {\nreturn simulation.find(d3.event.x, d3.event.y, radius);\n}\n\nfunction dragstarted() {\nif (!d3.event.active) simulation.alphaTarget(0.3).restart();\nd3.event.subject.fx = d3.event.subject.x;\nd3.event.subject.fy = d3.event.subject.y;\n}\n\nfunction dragged() {\nd3.event.subject.fx = d3.event.x;\nd3.event.subject.fy = d3.event.y;\n}\n\nfunction dragended() {\nif (!d3.event.active) simulation.alphaTarget(0);\nd3.event.subject.fx = null;\nd3.event.subject.fy = null;\n}\n  }\n\n  render(){\n    return(\n      <div>\n        <canvas ref=\"canvas\" width = \"window.innerWidth\" height =\"window.innerHeight\"/>\n      </div>\n    )\n  }\n}\n\nexport default Canvas\n","// import React, { useEffect, useRef } from \"react\";\n// import { animated, useSpring } from \"react-spring\";\n// import * as d3 from \"d3\";\n\n// const colors = d3.scaleOrdinal(d3.schemeCategory10);\n// const format = d3.format(\".2f\");\n// const animationDuration = 250;\n// const animationConfig = {\n//   to: async (next, cancel) => {\n//     await next({ t: 1 });\n//   },\n//   from: { t: 0 },\n//   config: { duration: animationDuration },\n//   reset: true\n// };\n\n// const Arc = ({ index, from, to, createArc, colors, format, animatedProps }) => {\n//   const interpolator = d3.interpolate(from, to);\n\n//   return (\n//     <g key={index} className=\"arc\">\n//       <animated.path\n//         className=\"arc\"\n//         d={animatedProps.t.interpolate(t => createArc(interpolator(t)))}\n//         fill={colors(index)}\n//       />\n//       <animated.text\n//         transform={animatedProps.t.interpolate(\n//           t => `translate(${createArc.centroid(interpolator(t))})`\n//         )}\n//         textAnchor=\"middle\"\n//         alignmentBaseline=\"middle\"\n//         fill=\"white\"\n//         fontSize=\"10\"\n//       >\n//         {animatedProps.t.interpolate(t => format(interpolator(t).name))}\n//       </animated.text>\n//     </g>\n//   );\n// };\n\n// const Pie = props => {\n//   const cache = useRef([]);\n//   const createPie = d3\n//     .pie()\n//     .value(d => d.value)\n//     .sort(null);\n//   const createArc = d3\n//     .arc()\n//     .innerRadius(props.innerRadius)\n//     .outerRadius(props.outerRadius);\n//   const data = createPie(props.data);\n//   const previousData = createPie(cache.current);\n\n//   const [animatedProps, setAnimatedProps] = useSpring(() => animationConfig);\n//   setAnimatedProps(animationConfig);\n\n//   useEffect(() => {\n//     cache.current = props.data;\n//   });\n\n//   return (\n//     <svg width={props.width} height={props.height}>\n//       <g transform={`translate(${props.outerRadius} ${props.outerRadius})`}>\n//         {data.map((d, i) => (\n//           <Arc\n//             key={i}\n//             index={i}\n//             from={previousData[i]}\n//             to={d}\n//             createArc={createArc}\n//             colors={colors}\n//             format={format}\n//             animatedProps={animatedProps}\n//           />\n//         ))}\n//       </g>\n//     </svg>\n//   );\n// };\n\n// export default Pie;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst Pie = props => {\n  const ref = useRef(null);\n  const createPie = d3\n    .pie()\n    .value(d => d.value)\n    .sort(null);\n  const createArc = d3\n    .arc()\n    .innerRadius(props.innerRadius)\n    .outerRadius(props.outerRadius);\n  const colors = d3.scaleOrdinal(d3.schemeCategory10);\n  const format = d3.format(\".2f\");\n\n  useEffect(\n    () => {\n      const data = createPie(props.data);\n      const group = d3.select(ref.current);\n      const groupWithData = group.selectAll(\"g.arc\").data(data);\n\n      groupWithData.exit().remove();\n\n      const groupWithUpdate = groupWithData\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"arc\");\n\n      const path = groupWithUpdate\n        .append(\"path\")\n        .merge(groupWithData.select(\"path.arc\"));\n\n      path\n        .attr(\"class\", \"arc\")\n        .attr(\"d\", createArc)\n        .attr(\"fill\", (d, i) => colors(i));\n\n      const text = groupWithUpdate\n        .append(\"text\")\n        .merge(groupWithData.select(\"text\"));\n\n      text\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"alignment-baseline\", \"middle\")\n        .attr(\"transform\", d => `translate(${createArc.centroid(d)})`)\n        .style(\"fill\", \"yellow\")\n        .style(\"font-size\", 10)\n        .text(d => {return d.data.name});\n    },\n    [props.data]\n  );\n\n  return (\n    <svg width={props.width} height={props.height}>\n      <g\n        ref={ref}\n        transform={`translate(${props.outerRadius} ${props.outerRadius})`}\n      />\n    </svg>\n  );\n};\n\nexport default Pie;\n","import React, {useState, useEffect} from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport * as d3 from 'd3'\nimport gql from 'graphql-tag';\nimport './App.css';\nimport styled from 'styled-components'\nimport {DragPush, AnimatedPieSvg} from './components/diagram'\n\n\nconst StyledDiv = styled.div`\n  padding: 0.5em;\n  color: ${props => props.inputColor || \"yellow\"};\n  background: black;\n  border: solid;\n  border-color: yellow;\n  border-radius: 3px;\n  display:flex;\n  flex-direction:column;\n  align-items:center;\n`\n\nconst StyledTitle = styled.div`\n  text-align:center;\n  font-size: 24px;\n`\n\nconst StyledTable = styled.table`\n  border: solid;\n  margin: 0.25em;\n  padding: 0.25em;\n  color: yellow;\n  width: 50%;\n  text-align:center;\n`\nconst StyledContainer =styled.div`\n  margin-left: 10%;\n  margin-right: 10%;\n`\n\nconst StyledP = styled.p`\n\n`\n\nconst GET_STARSHIP_INFO = gql`\n{\n  allStarships(orderBy:length_ASC){\n    name\n    hyperdriveRating\n    length\n    crew\n    passengers\n    pilots(orderBy: height_ASC){\n      name\n      height\n      homeworld{\n        name\n      }\n    }\n  }\n}\n`\n\nfunction App() {\n  const { data, loading, error} = useQuery(GET_STARSHIP_INFO)\n\n\n  let infoData = ''\n\n  if (loading) return <p>loading...</p>\n  if (error) return <p>Error... {error.message}</p>\n  if (data) {\n    infoData = data.allStarships.map(item => {\n      const container ={}\n      container[\"name\"] = item.name\n      container[\"value\"] = item.length + item.crew\n      return container\n    }\n      )\n    console.log(infoData)\n  }\n  return (\n    <React.Fragment>\n      <StyledContainer>\n      {data.allStarships.map((item, index)=>\n      <StyledDiv key={index}>\n        <StyledTitle>{item.name}</StyledTitle>\n        <StyledTable>\n          <thead>\n          <tr>\n            <th>Length</th>\n            <th>Crew Size</th>\n            <th>Total Capacity</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n          <td>{item.length}</td>\n          <td>{item.crew}</td>\n          <td>{item.passengers + item.crew}</td>\n          </tr>\n          </tbody>\n        </StyledTable>\n      </StyledDiv>)}\n      <StyledDiv>\n        <span className=\"label\">Breakdown of Ships by Length</span>\n        <AnimatedPieSvg\n          data={infoData}\n          width={400}\n          height={400}\n          innerRadius={0}\n          outerRadius={200}\n        />\n      </StyledDiv>\n      <DragPush data ={infoData}/>\n      </StyledContainer>\n    </React.Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient } from 'apollo-client';\nimport {InMemoryCache} from  'apollo-cache-inmemory'\nimport { HttpLink} from 'apollo-link-http'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'https://api.graphcms.com/simple/v1/swapi'\n});\n\nconst client = new ApolloClient({\n  cache,\n  link\n})\n\nReactDOM.render(<ApolloProvider client = {client} ><App /></ApolloProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}